package library

import (
	"fmt"
	"home/internal/book"
	"home/internal/reader"
)

type Library struct {
	Books   []*book.Book
	Readers []*reader.Reader
}

func (l *Library) AddBook(b *book.Book) {
	l.Books = append(l.Books, b)
	fmt.Printf("–ö–Ω–∏–≥–∞ '%s' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.\n", b.Title)
}

func (l *Library) RemoveBook(isbn string) {
	for i, b := range l.Books {
		if b.ISBN == isbn {
			l.Books = append(l.Books[:i], l.Books[i+1:]...)
			fmt.Printf("–ö–Ω–∏–≥–∞ '%s' —É–¥–∞–ª–µ–Ω–∞.\n", b.Title)
			return
		}
	}
	fmt.Println("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
}

func (l *Library) RegisterReader(r *reader.Reader) {
	l.Readers = append(l.Readers, r)
	fmt.Printf("–ß–∏—Ç–∞—Ç–µ–ª—å '%s' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n", r.Name)
}

func (l *Library) RemoveReader(id int) {
	for i, r := range l.Readers {
		if r.ID == id {
			l.Readers = append(l.Readers[:i], l.Readers[i+1:]...)
			fmt.Printf("–ß–∏—Ç–∞—Ç–µ–ª—å '%s' —É–¥–∞–ª—ë–Ω.\n", r.Name)
			return
		}
	}
	fmt.Println("–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
}

func (l *Library) BorrowBook(isbn string, readerID int) {
	for _, b := range l.Books {
		if b.ISBN == isbn {
			if b.Borrow() {
				fmt.Printf("–ö–Ω–∏–≥–∞ '%s' –≤—ã–¥–∞–Ω–∞ —á–∏—Ç–∞—Ç–µ–ª—é #%d.\n", b.Title, readerID)
				return
			}
			fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏.")
			return
		}
	}
	fmt.Println("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
}

func (l *Library) ReturnBook(isbn string, readerID int) {
	for _, b := range l.Books {
		if b.ISBN == isbn {
			if b.Return() {
				fmt.Printf("–ß–∏—Ç–∞—Ç–µ–ª—å #%d –≤–µ—Ä–Ω—É–ª –∫–Ω–∏–≥—É '%s'.\n", readerID, b.Title)
				return
			}
			fmt.Println("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞.")
			return
		}
	}
	fmt.Println("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
}

func (l *Library) ListBooks() {
	fmt.Println("\nüìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:")
	for _, b := range l.Books {
		fmt.Printf("‚Ä¢ %s (%s) [%d/%d –¥–æ—Å—Ç—É–ø–Ω–æ]\n", b.Title, b.Author, b.Copies-b.Borrowed, b.Copies)
	}
}
